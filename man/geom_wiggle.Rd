% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_coverage.R, R/geom_wiggle.R
\name{geom_coverage}
\alias{geom_coverage}
\alias{geom_wiggle}
\title{Draw wiggle ribbons or lines}
\usage{
geom_coverage(
  mapping = NULL,
  data = feats(),
  stat = "coverage",
  geom = "ribbon",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  offset = 0,
  height = 0.2,
  max = base::max,
  ...
)

geom_wiggle(
  mapping = NULL,
  data = feats(),
  stat = "wiggle",
  geom = "ribbon",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  offset = 0,
  height = 0.8,
  bounds = Hmisc::smedian.hilow,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this
layer, either as a \code{ggproto} \code{Geom} subclass or as a string naming the
stat stripped of the \code{stat_} prefix (e.g. \code{"count"} rather than
\code{"stat_count"})}

\item{geom}{The geometric object to use to display the data, either as a
\code{ggproto} \code{Geom} subclass or as a string naming the geom stripped of the
\code{geom_} prefix (e.g. \code{"point"} rather than \code{"geom_point"})}

\item{position}{Position adjustment, either as a string naming the adjustment
(e.g. \code{"jitter"} to use \code{position_jitter}), or the result of a call to a
position adjustment function. Use the latter if you need to change the
settings of the adjustment.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{offset}{distance between seq center and wiggle mid/start.}

\item{height}{distance in plot between lowest and highest point of the wiggle data.}

\item{max}{geom_coverage uses the function \link[base:Extremes]{base::max} by default, which plots data in positive direction.
(\link[base:Extremes]{base::min} Can also be called here when the input data )}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{bounds}{geom_wiggle uses mid, low and high boundary values for plotting wiggle data. Can
be both a function or a vector returning those three values. Defaults to
\link[Hmisc:smean.sd]{Hmisc::smedian.hilow}.}
}
\description{
Visualize data that varies along sequences as ribbons, lines, lineranges,
etc.
}
\details{
Geom_wiggle plots the wiggle data in both directions around the median.
Geom_coverage plots the data only in positive direction.
Both functions use data from the feats' track.
}
\section{Aesthetics}{
 \code{geom_wiggle()} and \code{geom_coverage()} understand aesthetics depending on the
chosen underlying ggplot geom, by default \code{\link[ggplot2:geom_ribbon]{ggplot2::geom_ribbon()}}. Other
options that play well are for example \code{\link[ggplot2:geom_path]{ggplot2::geom_line()}},
\code{\link[ggplot2:geom_linerange]{ggplot2::geom_linerange()}}, \code{\link[ggplot2:geom_point]{ggplot2::geom_point()}}. The only required
aesthetic is:
\itemize{
\item \strong{z}
}
}

\examples{
# Plotting data with geom_coverage with increased height.
gggenomes(seqs = emale_seqs, feats = emale_gc) +
  geom_coverage(aes(z = score), height = 0.5) +
  geom_seq()

# In opposite direction by calling base::min and taking the negative values of "score"
gggenomes(seqs = emale_seqs, feats = emale_gc) +
  geom_coverage(aes(z = -score), max = base::min, height = 0.5) +
  geom_seq()

# GC-content plotted as points with variable color in geom_coverage
gggenomes(seqs = emale_seqs, feats = emale_gc) +
  geom_coverage(aes(z = score, color = score), height = 0.5, geom = "point") +
  geom_seq()
# Plot varying GC-content along sequences as ribbon
gggenomes(seqs=emale_seqs, feats=emale_gc) +
  geom_wiggle(aes(z=score)) +
  geom_seq()

# customize color and position
gggenomes(genes=emale_genes, seqs=emale_seqs, feats=emale_gc) +
  geom_wiggle(aes(z=score), fill="lavenderblush3", offset=-.3, height=.5) +
  geom_seq() + geom_gene()

# GC-content as line and with variable color
gggenomes(seqs=emale_seqs, feats=emale_gc) +
  geom_wiggle(aes(z=score, color=score), geom="line", bounds=c(.5,0,1)) +
  geom_seq() +
  scale_colour_viridis_b(option="A")

# or as lineranges
gggenomes(seqs=emale_seqs, feats=emale_gc) +
  geom_wiggle(aes(z=score, color=score), geom="linerange") +
  geom_seq() +
  scale_colour_viridis_b(option="A")
}
