% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_gene_text.R
\name{geom_feat_text}
\alias{geom_feat_text}
\alias{geom_feat_tag}
\alias{geom_feat_note}
\alias{geom_gene_text}
\alias{geom_gene_tag}
\alias{geom_gene_note}
\title{Add text to genes, features, etc.}
\usage{
geom_feat_text(
  mapping = NULL,
  data = feats(),
  stat = "identity",
  position = "identity",
  ...,
  parse = FALSE,
  check_overlap = FALSE,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

geom_feat_tag(
  mapping = NULL,
  data = feats(),
  stat = "identity",
  position = "identity",
  hjust = 0,
  vjust = 0,
  angle = 45,
  nudge_y = 0.03,
  xjust = 0.5,
  strandwise = TRUE,
  ...,
  parse = FALSE,
  check_overlap = FALSE,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

geom_feat_note(
  mapping = NULL,
  data = feats(),
  stat = "identity",
  position = "identity",
  hjust = 0,
  vjust = 1,
  nudge_y = -0.03,
  xjust = 0,
  strandwise = FALSE,
  ...,
  parse = FALSE,
  check_overlap = FALSE,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

geom_gene_text(
  mapping = NULL,
  data = genes(),
  stat = "identity",
  position = "identity",
  ...,
  parse = FALSE,
  check_overlap = FALSE,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

geom_gene_tag(
  mapping = NULL,
  data = genes(),
  stat = "identity",
  position = "identity",
  hjust = 0,
  vjust = 0,
  angle = 45,
  nudge_y = 0.03,
  xjust = 0.5,
  strandwise = TRUE,
  ...,
  parse = FALSE,
  check_overlap = FALSE,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

geom_gene_note(
  mapping = NULL,
  data = genes(),
  stat = "identity",
  position = "identity",
  hjust = 0,
  vjust = 1,
  nudge_y = -0.03,
  xjust = 0,
  strandwise = FALSE,
  ...,
  parse = FALSE,
  check_overlap = FALSE,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this
layer, either as a \code{ggproto} \code{Geom} subclass or as a string naming the
stat stripped of the \code{stat_} prefix (e.g. \code{"count"} rather than
\code{"stat_count"})}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function. Cannot be jointly specified with
\code{nudge_x} or \code{nudge_y}.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{parse}{If \code{TRUE}, the labels will be parsed into expressions and
displayed as described in \code{?plotmath}.}

\item{check_overlap}{If \code{TRUE}, text that overlaps previous text in the
same layer will not be plotted. \code{check_overlap} happens at draw time and in
the order of the data. Therefore data should be arranged by the label
column before calling \code{geom_text()}. Note that this argument is not
supported by \code{geom_label()}.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{hjust}{Moves the text horizontally}

\item{vjust}{Moves the text vertically}

\item{angle}{Defines the angle in which the text will be placed. *Note}

\item{nudge_y}{Moves the text vertically an entire contig/sequence.
(e.g. \code{nudge_y = 1} places the text to the contig above)}
}
\description{
The functions below are useful for labeling features/genes in plots.
Users have to call on \code{aes(label = ...)} or \code{(label = ...) }to define label's text
Based on the function, the label will be placed at a specific location:
\itemize{
\item \code{geom_..._text()} will plot \strong{text in the middle of the feature}.
\item \code{geom_..._tag()}  will plot \strong{text on top of the feature, with a 45 degree angle}.
\item \code{geom_..._note()} will plot \strong{text under the feature at the left side}.
}

\emph{The \code{...} can be either replaced with \code{feat} or \code{gene} depending on which}
\emph{track the user wants to label.}

With arguments such as \code{hjust}, \code{vjust}, \code{angle}, and \code{nudge_y}, the user
can also manually change the position of the text.
}
\details{
These labeling functions use \code{ggplot2::geom_text()} under the hood.
Any changes to the aesthetics of the text can be performed in a ggplot2 manner.
}
\examples{
# example data
genes <- tibble(
seq_id = c("A", "A", "A", "B", "B", "C"),
start = c(20, 40, 80, 30, 10, 60),
end = c(30, 70, 85, 40, 15, 90),
feat_id = c("A1", "A2", "A3", "B1", "B2", "C1"),
type = c("CDS", "CDS", "CDS", "CDS", "CDS", "CDS"),
name = c("geneA", "geneB", "geneC", "geneA", "geneC", "geneB"))

seqs <- tibble(
seq_id = c("A", "B", "C"),
start = c(0,0,0),
end = c(100, 100, 100),
length = c(100, 100, 100))

# basic plot creation
plot <- gggenomes(seqs=seqs, genes=genes) +
geom_bin_label() +
geom_gene()

# geom_..._text
plot + geom_gene_text(aes(label=name))

# geom_..._tag
plot + geom_gene_tag(aes(label=name))

# geom_..._note
plot + geom_gene_note(aes(label=name))

# with horizontal adjustment (`hjust`), vertical adjustment (`vjust`) 
plot + geom_gene_text(aes(label=name), vjust = -2, hjust = 1)

# using `nudge_y` and and `angle` adjustment
plot + geom_gene_text(aes(label=name), nudge_y= 1, angle = 10)

# labeling with manual input
plot + geom_gene_text(label = c("This", "is", "an", "example", "test", "test"))
}
